import Head from 'next/head'
import { toast } from 'react-toastify'
import React, { useEffect, useState } from 'react'
import { useTranslation } from 'react-i18next'
import { getDownloadURL, ref, uploadBytes } from 'firebase/storage'
import { fileStorage } from '../../server/configs/firebase'
import { getProfileInfo, editProfileInfo } from '../../shared/services/axios'
import { useRouter } from 'next/router'
import ClientLayout from '../../shared/components/layout/client/Header'
import UserAside from '../../shared/components/client/userAside'

const UserProfile = () => {
  const { t, i18n } = useTranslation()
  const [loading, setLoading] = useState(false)
  const { push } = useRouter()
  const [userDatas, setUserDatas] = useState({
    name: '',
    username: '',
    img_url: '',
    phone: '',
    fullname: '',
    email: '',
    address: '',
  })

  const [imgUrl, setImgUrl] = useState('')
  const [imgOnload, setImgOnload] = useState(false)
  const date = new Date()

  function getValues(e) {
    let name = e.target.name
    let value = e.target.value

    setUserDatas((prev) => ({
      ...prev,
      img_url: imgUrl,
      [name]: value,
    }))
  }

  const reLogin = () => {
    const loginDate = parseInt(localStorage.getItem('loginDate') || '', 10)
    const currentSecond = date.getTime()
    const timeDifference = currentSecond - (loginDate || 0)
    if (!localStorage.getItem('userInfo')) {
      setTimeout(() => {
        push('/login')
      }, 1000)
      return
    }

    if (timeDifference / 1000 >= 3600) {
      setTimeout(() => {
        push('/login')
      }, 1000)
      localStorage.removeItem('userInfo')
      localStorage.removeItem('tokenObj')
    }
  }

  const isValidAzerbaijanPhoneNumber = (phoneNumber) => {
    const azPhoneNumberRegex = /^\+994(50|51|55|70|77|10)\d{7}$/
    return azPhoneNumberRegex.test(phoneNumber)
  }

  const getUserDatas = async () => {
    const res = await getProfileInfo()
    setUserDatas(res?.data?.user)
    setLoading(true)
  }

  useEffect(() => {
    getUserDatas()
    reLogin()
  }, [])

  const getImage = (e) => {
    const name = e?.target?.files?.[0]?.name
    if (!name) {
      return
    }
    const imageRef = ref(fileStorage, `files/images/${name}`)

    const file = e?.target?.files?.[0]

    if (!file) {
      return
    }
    uploadBytes(imageRef, file).then((snapshot) => {
      setImgOnload(true)
      getDownloadURL(snapshot.ref).then((url) => {
        setImgOnload(false)
        setImgUrl(url)
      })
    })
  }

  const isObjectFullyFilled = (obj) => {
    if (Object.values(obj).length <= 5) {
      return false
    }
    return Object.values(obj).every(
      (value) => value !== null && value !== undefined && value !== ''
    )
  }

  const updateUserData = async () => {
    if (!isObjectFullyFilled(userDatas)) {
      toast.warning('Please fill the all inputs!', {
        autoClose: 1000,
      })
      return
    }
    if (!isValidAzerbaijanPhoneNumber(userDatas?.phone)) {
      toast.warning('Invalid phone number!', {
        autoClose: 1000,
      })
      return
    }
    const res = await editProfileInfo(userDatas)
    const localUser = localStorage?.getItem('userInfo')
    if (res?.status === 200) {
      toast.success('Profile updated successfully', {
        autoClose: 1000,
      })
      const newProfile = JSON.parse(localUser)

      newProfile.username = res.data.user.username
      newProfile.fullname = res.data.user.fullname
      newProfile.phone = res.data.user.phone
      newProfile.address = res.data.user.address
      newProfile.img_url = res.data.user.img_url

      localStorage.setItem('userInfo', JSON.stringify(newProfile))
      push('/')
      return
    }
  }

  return (
    <>
      <Head>
        <title>Foody | User Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/mainBurger.svg" />
      </Head>
      <main>
        <ClientLayout>
          {loading ? (
            <section className="m-4 sm:m-8 flex justify-center gap-10">
              <UserAside />
              <div className="w-full flex  flex-col  sm:px-8 sm:py-10 flex-wrap gap-x-1 gap-y-8 bg-white sm:bg-whiteLight1">
                <h2 className=" font-semibold text-3xl text-grayText2">
                  {t('userDesc')}
                </h2>
                <input
                  onChange={getImage}
                  type="file"
                  id="file"
                  accept="image/*"
                  className=" hidden"
                />
                <label htmlFor="file">
                  <div className=" w-full flex  justify-center ">
                    <img
                      width={146}
                      height={0}
                      src={`${
                        imgOnload
                          ? '/loadingImg.jpg'
                          : imgUrl
                          ? imgUrl
                          : '/user-profile-upload.svg'
                      }`}
                      alt="upload"
                      className="cursor-pointer"
                    />
                  </div>
                </label>
                <div className=" sm:m-10 flex flex-wrap justify-center gap-4  ">
                  <div className="">
                    <label>{t('userProfileContact')}</label>
                    <br />
                    <input
                      onChange={getValues}
                      className=" w-[286px] sm:w-[444px] overflow-hidden h-14 p-3 rounded  bg-[#F3F4F6]  sm:bg-white"
                      type="text"
                      name="phone"
                      placeholder="+994"
                      value={userDatas?.phone || ''}
                    />
                  </div>
                  <div className="">
                    <label>Email</label>
                    <br />
                    <input
                      className="w-[286px] sm:w-[444px] overflow-hidden h-14 p-3 rounded bg-[#F3F4F6]  sm:bg-white"
                      type="text"
                      name="contact"
                      placeholder="test@gmail.com"
                      disabled
                      value={userDatas?.email || ''}
                    />
                  </div>
                  <div className="">
                    <label>{t('userProfileUsarname')}</label>
                    <br />
                    <input
                      onChange={getValues}
                      className="w-[286px] sm:w-[444px] overflow-hidden h-14 p-3 rounded bg-[#F3F4F6]  sm:bg-white"
                      type="text"
                      name="username"
                      placeholder="Username"
                      value={userDatas?.username || ''}
                    />
                  </div>
                  <div className="">
                    <label>{t('userProfileAddress')}</label>
                    <br />
                    <input
                      onChange={getValues}
                      className="w-[286px] sm:w-[444px] overflow-hidden h-14 p-3 rounded bg-[#F3F4F6]  sm:bg-white"
                      type="text"
                      name="address"
                      placeholder="Asad Ahmadov street. Baku"
                      value={userDatas?.address || ''}
                    />
                  </div>
                  <div className="">
                    <label>{t('userProfileFullname')}</label>
                    <br />
                    <input
                      onChange={getValues}
                      className="w-[286px] sm:w-[444px] overflow-hidden h-14 p-3 rounded bg-[#F3F4F6]  sm:bg-white"
                      type="text"
                      name="fullname"
                      placeholder="Full name"
                      value={userDatas?.fullname || ''}
                    />
                  </div>
                  <div className="flex items-end ">
                    <button
                      onClick={updateUserData}
                      className=" w-[286px] sm:w-[444px] h-[53px] rounded bg-[#6FCF97] transition-transform transform duration-300 hover:scale-95"
                    >
                      {t('userProfileSave')}
                    </button>
                  </div>
                </div>
              </div>
            </section>
          ) : (
            <div>
              <h1 className="loading"></h1>
            </div>
          )}
        </ClientLayout>
      </main>
    </>
  )
}
export default UserProfile
